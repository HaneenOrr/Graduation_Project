{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "161 1364 468 27\n",
      "References furnished upon request.\n",
      "161 1317 557 30\n",
      "MILITARY STATUS: Postponed.\n",
      "162 1273 535 27\n",
      "Soccer, Reading, Computer Games, Internet.\n",
      "172 1223 252 28\n",
      "HOBBIES\n",
      "[1223]\n",
      "HOBBIES\n",
      "207 1178 782 26\n",
      ">» SUMMER TRAINING AT BMW FACTORY IN EGYPT, 2014.\n",
      "161 1132 248 26\n",
      "\n",
      "262 1087 659 28\n",
      "Manging FB Page, developing campaigns for events.\n",
      "207 1044 750 27\n",
      "> Head, Marketing & Media, ZeroOne (Student Activity), 2016.\n",
      "207 1000 703 28\n",
      "> Work as English freelancer translator, July 2016 /present.\n",
      "161 951 443 28\n",
      "WORK EXPERIENCE\n",
      "[1223, 951]\n",
      "WORK EXPERIENCE\n",
      "217 903 638 30\n",
      "e Arabic (mothertongue), English (intermediate).\n",
      "161 857 396 25\n",
      "LANGUAGE SKILLS:\n",
      "[1223, 951, 857]\n",
      "LANGUAGE SKILLS:\n",
      "217 812 710 28\n",
      "° Good knowledge of Microsoft Office and other Programs.\n",
      "217 768 429 24\n",
      "Basics of C# windows forms.\n",
      "217 722 318 28\n",
      "° Basics of Verilog.\n",
      "216 655 877 51\n",
      "Basics of Android, (worked on Android App Project with other colleagues,\n",
      "httns://github.com/MahmoudSelmv/BookSharingAnp ).\n",
      "217 612 295 26\n",
      "C++, OOP, Git.\n",
      "173 565 397 26\n",
      "COMPUTER SKILLS:\n",
      "[1223, 951, 857, 565]\n",
      "COMPUTER SKILLS:\n",
      "162 515 220 28\n",
      "SKILLS\n",
      "[1223, 951, 857, 565, 515]\n",
      "SKILLS\n",
      "217 464 851 30\n",
      "e Ahmad Lutfy Al-Sayed Secondary School, Giza, Egypt, 2010/2013.\n",
      "173 438 297 25\n",
      "SECONDARY :\n",
      "160 340 879 79\n",
      "COLLEGE :\n",
      "= Computer and System Engineering, Ain Shams University, 2013.\n",
      "= Expected Graduation date: 2018.\n",
      "172 276 317 28\n",
      "EDUCATION:\n",
      "[1223, 951, 857, 565, 515, 276]\n",
      "EDUCATION:\n",
      "469 169 561 79\n",
      "(+2 02) 01127813451\n",
      "ens.ebrahem.ahmed@gmail.com\n",
      "httns://sithub.com/IbrahemAbdElfattah\n",
      "402 115 697 28\n",
      "IBRAHEM AHMED ABD AL-FATTAH\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "13"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import cv2\n",
    "import re\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "import pytesseract\n",
    "from pytesseract import image_to_string\n",
    "\n",
    "img = cv2.imread('./cv/c6.jpg')\n",
    "width = int(1500)\n",
    "height = int(1500)\n",
    "dim = (width, height)\n",
    "# resize image\n",
    "image = cv2.resize(img, dim, interpolation = cv2.INTER_AREA)\n",
    "\n",
    "#pre-processing steps\n",
    "result = image.copy()\n",
    "gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)\n",
    "thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]\n",
    "\n",
    "    # Remove horizontal lines\n",
    "horizontal_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (40,1))\n",
    "remove_horizontal = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, horizontal_kernel, iterations=2)\n",
    "cnts = cv2.findContours(remove_horizontal, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n",
    "cnts = cnts[0] if len(cnts) == 2 else cnts[1]\n",
    "for c in cnts:\n",
    "    cv2.drawContours(result, [c], -1, (255,255,255), 5)\n",
    "\n",
    "    # Remove vertical lines\n",
    "vertical_kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1,40))\n",
    "remove_vertical = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, vertical_kernel, iterations=2)\n",
    "cnts = cv2.findContours(remove_vertical, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n",
    "cnts = cnts[0] if len(cnts) == 2 else cnts[1]\n",
    "for c in cnts:\n",
    "    cv2.drawContours(result, [c], -1, (255,255,255), 5)\n",
    "    \n",
    "    \n",
    "    \n",
    "gray = cv2.cvtColor(result,cv2.COLOR_BGR2GRAY)\n",
    "cv2.imshow('gray',gray)\n",
    "cv2.waitKey(0)\n",
    "\n",
    "ret,thresh = cv2.threshold(gray,180,255,cv2.THRESH_BINARY_INV)\n",
    "cv2.imshow('second',thresh)\n",
    "cv2.waitKey(0)\n",
    "\n",
    "kernel = np.ones((11,100), np.uint8)\n",
    "img_dilation = cv2.dilate(thresh, kernel, iterations=1)\n",
    "cv2.imshow('dilated',img_dilation)\n",
    "cv2.waitKey(0)\n",
    "\n",
    "im2,ctrs, hier = cv2.findContours(img_dilation.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n",
    "#ctrs = sorted(ctrs, key = cv2.contourArea, reverse = True)[:5]       \n",
    "            \n",
    "yy=[]       \n",
    "for i, ctr in enumerate(ctrs):\n",
    "    \n",
    "    x, y, w, h = cv2.boundingRect(ctr)\n",
    "    roi = result[y:y+h, x:x+w]\n",
    "    print(x,y,w,h)\n",
    "\n",
    "    cv2.imshow('segment no:'+str(i),roi)\n",
    "    cv2.imwrite(\"segment_no_\"+str(i)+\".png\",roi)\n",
    "   # print(x+w,y+h)\n",
    "    #grayscale\n",
    "    img = cv2.imread('segment_no_'+str(i)+\".png\")\n",
    "    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n",
    "    #binary\n",
    "    ret,thresh = cv2.threshold(gray,127,255,cv2.THRESH_BINARY_INV)\n",
    "     \n",
    "    img2=Image.open('segment_no_'+str(i)+\".png\")\n",
    "    out=image_to_string(img2)\n",
    "    print(out)\n",
    "    #Extracurricular activities\n",
    "    for z in range (0,1):\n",
    "        if(re.search('EDUCATION:',out)\n",
    "            or re.search('WORK EXPERIENCE',out) or re.search('SKILLS',out) \n",
    "            or re.search('HOBBIES',out)\n",
    "             ):\n",
    "            yy.append(y)\n",
    "            #cv2.rectangle(image,(x,y),( x + 660, y + 72 ),(90,0,255),2)\n",
    "            #crop = image[y:y+72, x:x+660]\n",
    "            out=image_to_string(img2)\n",
    "            print (yy)\n",
    "            print(out)\n",
    "            cv2.waitKey(0)\n",
    "\n",
    "yy.sort()\n",
    "for c in range (len(yy)-1):\n",
    "    cv2.rectangle(result,(10,yy[c]),( x + 1000, yy[c+1]-7 ),(90,0,255),2)\n",
    "    crop = result[y:yy[c+1]-7, x:x+1000]\n",
    "    cv2.imshow('after no:'+str(c),crop)\n",
    "    cv2.imwrite(\"after\"+str(c)+\".png\",crop)\n",
    "    img = cv2.imread('after'+str(i)+\".png\")\n",
    "    cv2.waitKey(0)\n",
    "    \n",
    "cv2.imwrite('yousef.png',result)\n",
    "cv2.imshow('marked areas',result)\n",
    "cv2.waitKey(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries \n",
    "from PIL import Image \n",
    "import pytesseract \n",
    "import sys \n",
    "from pdf2image import convert_from_path \n",
    "import os \n",
    "\n",
    "\n",
    "    pages = convert_from_path(PDF_file, 500) \n",
    "\n",
    "    image_counter = 1\n",
    "\n",
    "\n",
    "    for page in pages: \n",
    "        filename = \"cvpdf\"+str(image_counter)+\".jpg\"\n",
    "        page.save(filename, 'JPEG') \n",
    "        image_counter = image_counter + 1\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<re.Match object; span=(820, 829), match='EDUCATION'>\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "with open('data.txt', 'r') as myfile:\n",
    "   # l=[]\n",
    "    data = myfile.read()\n",
    "    result=re.search('EDUCATION',data)\n",
    "    print(result)\n",
    "    #l.append(result)\n",
    "    #print(l)\n",
    "    #print (data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
